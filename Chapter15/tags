!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CHECKSUM_PATTERN	Common/WorkItem.h	9;"	d
Client	Client/Client.h	/^	Client(unsigned int id, const char* server_name = NULL, int port = 6323) {$/;"	f	class:Client
Client	Client/Client.h	/^class Client$/;"	c
DATA_LEN	Common/WorkItem.h	7;"	d
DATA_SEG_COUNT	Common/WorkItem.h	8;"	d
MAX_EVENTS_RECEIVED	Server/Server.h	14;"	d
SECONDS_TO_RUN_CLIENT_DEFAULT	Client/Client.cpp	3;"	d	file:
Server	Server/Server.h	/^	Server(unsigned int id, unsigned int port = 6323) : m_id(id), m_port(port) {$/;"	f	class:Server
Server	Server/Server.h	/^class Server $/;"	c
WORK_TIMES_TO_CHECK_TIME	Client/Client.h	13;"	d
WorkItem	Common/WorkItem.h	/^	WorkItem(const char* name, const char* data = NULL, int dataLen = 0)$/;"	f	class:WorkItem
WorkItem	Common/WorkItem.h	/^class WorkItem$/;"	c
__CLIENT_H__	Client/Client.h	2;"	d
__SERVER_H__	Server/Server.h	2;"	d
__WORKITEM_H__	Common/WorkItem.h	2;"	d
atoi	Client/Client.cpp	/^int atoi(const char *s) {$/;"	f
connect	Client/Client.h	/^	bool connect() {$/;"	f	class:Client
cook_data	Client/Client.h	/^	void cook_data() {$/;"	f	class:Client
disconnect	Client/Client.h	/^	bool disconnect() {$/;"	f	class:Client
do_accept	Server/Server.h	/^	static void do_accept(evutil_socket_t listener, short event, void* arg) {$/;"	f	class:Server
generateChecksum	Common/WorkItem.h	/^	unsigned short generateChecksum() {$/;"	f	class:WorkItem
getName	Common/WorkItem.h	/^    const char* getName() {$/;"	f	class:WorkItem
m_checksum	Common/WorkItem.h	/^	unsigned short	m_checksum;$/;"	m	class:WorkItem
m_cooked_count	Client/Client.h	/^	unsigned int m_cooked_count;$/;"	m	class:Client
m_data	Common/WorkItem.h	/^	char	m_data[DATA_LEN];$/;"	m	class:WorkItem
m_id	Client/Client.h	/^	unsigned int m_id;$/;"	m	class:Client
m_id	Server/Server.h	/^	unsigned int m_id;$/;"	m	class:Server
m_name	Common/WorkItem.h	/^	char	m_name[30];$/;"	m	class:WorkItem
m_port	Server/Server.h	/^	unsigned int m_port;$/;"	m	class:Server
m_server_name	Client/Client.h	/^	char	m_server_name[256];$/;"	m	class:Client
m_server_port	Client/Client.h	/^	int		m_server_port;$/;"	m	class:Client
m_socket	Client/Client.h	/^	int		m_socket;$/;"	m	class:Client
m_socket	Server/Server.h	/^	int		m_socket;$/;"	m	class:Server
m_workitem_data	Client/Client.h	/^	char	m_workitem_data[DATA_LEN];$/;"	m	class:Client
m_workitem_data_len	Client/Client.h	/^	int		m_workitem_data_len;$/;"	m	class:Client
m_workitem_name	Client/Client.h	/^	char    m_workitem_name[30];$/;"	m	class:Client
main	Client/Client.cpp	/^int main(int argc, const char** argv) {$/;"	f
main	Server/Server.cpp	/^int main() {$/;"	f
make_socket_nonblock	Server/Server.h	/^    void make_socket_nonblock() {$/;"	f	class:Server
start	Server/Server.h	/^	bool start() {$/;"	f	class:Server
validate	Common/WorkItem.h	/^	bool validate() {$/;"	f	class:WorkItem
work	Client/Client.h	/^	void work(unsigned int seconds_to_run) {$/;"	f	class:Client
